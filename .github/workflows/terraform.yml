# terraform.yaml
name: 'Terraform'

on:
  push:
    branches:
      - 'master' #나중에 스테이지 명으로 변경
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**/stage-terraform.yml'
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirm if you want to destroy the Terraform backend (type DESTROY to confirm)'
        required: true
        default: 'DESTROY'

env:
  AWS_REGION: us-east-1  # set this to your preferred AWS region, e.g. us-west-12

jobs:
  backend_destroy:
  runs-on: ubuntu-latest
  needs: backend_setup
  if: github.event.inputs.confirm_destroy == 'DESTROY' || github.event.pull_request.merged == true || github.event_name == 'delete'
  
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.8.0'

    - name: Confirm Destruction
      run: |
        echo "Destruction confirmed. Proceeding with Terraform destroy operation."

    - name: Terraform Init for Destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform_stage; terraform init \
          -backend-config="region=us-east-1" \
          -backend-config="bucket=nilla-terraform-lock" \
          -backend-config="key=stage/terraform/terraform.tfstate"

    - name: Terraform Destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform_stage; terraform destroy -auto-approve

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    #environment: stage

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # - name: Check base ref
    #   if: github.ref == 'refs/heads/stage'
    #   run: |
    #     echo "Merging to stage from elop is not allowed."
    #     exit 1

    # - name: Continue with normal operations
    #   if: github.ref != 'refs/heads/stage'
    #   run: |
    #     echo "This is a valid push or pull request on elop."

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest


    # AWS 리소스를 이용하기 위해서 추가
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1" #${{ env.AWS_REGION }}

    - name: Check and Initialize Terraform Backend
      run: |
        #!/bin/bash

        # AWS 리소스 존재 여부를 확인하는 함수들
        check_bucket_exists() {
            BUCKET_NAME="$1"
            output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
            if echo "$output" | grep -q 'NoSuchBucket'; then
                echo "false"
            elif echo "$output" | grep -q 'Access Denied'; then
                echo "access denied"
            else
                echo "true"
            fi
        }

        check_dynamodb_exists() {
            TABLE_NAME="$1"
            output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
            if echo "$output" | grep -q 'ResourceNotFoundException'; then
                echo "false"
            elif echo "$output" | grep -q 'AccessDeniedException'; then
                echo "access denied"
            else
                echo "true"
            fi
        }

        # Terraform 상태 관리를 위한 S3 버킷과 DynamoDB 테이블 이름
        S3_BUCKET="nilla-terraform-state-s3"
        DYNAMODB_TABLE="nilla-terraform-lock"

        # 버킷과 테이블의 존재 여부를 확인
        BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
        DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

        # Terraform 명령을 실행할 디렉터리로 이동
        if [ -d backend ]; then
            cd backend
        else
            echo "Backend directory does not exist. Exiting..."
            exit 1
        fi

        # Terraform 초기화 및 적용
        if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
            echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."
        elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
            echo "Access denied when checking resources. Please check your AWS credentials and permissions."
            exit 1
        else
            echo "Initializing Terraform because one or more resources do not exist."
            terraform init
            terraform plan
            terraform apply -auto-approve
        fi

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform_stage; terraform init ; terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: cd terraform_stage; terraform apply -auto-approve -input=false

  backend_setup:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Backend Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform init \
            -backend-config="region=us-east-1" \
            -backend-config="bucket=nilla-terraform-lock" \
            -backend-config="key=stage/terraform/terraform.tfstate"

  backend_destroy:
    runs-on: ubuntu-latest
    needs: backend_setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Confirm Destruction
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        run: |
          echo "Destruction confirmed. Proceeding with Terraform destroy operation."

      - name: Terraform Init for Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform init \
            -backend-config="region=us-east-1" \
            -backend-config="bucket=nilla-terraform-lock" \
            -backend-config="key=stage/terraform/terraform.tfstate"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_NILLA_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_NILLA_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform destroy -auto-approve
